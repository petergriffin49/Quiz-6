import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'icecreamParlor' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER m
     *  2. INTEGER_ARRAY arr
     */
    
    // recursive method to find a third ice cream flavor 
    public static List<Integer> icecreamRecursive(int m, List<Integer> arr, int index1, int index2, int index3){
        List<Integer> iceCream = new ArrayList<Integer>();
        if (index3+1 == arr.size()){
            m -= 1;
            index1 = 0;
            index2 = 1;
            index3 = 2;
        }
        
        int val1 = arr.get(index1);
        int val2 = arr.get(index2);
        int val3 = arr.get(index3);
        
        if ((val1 + val2 + val3) == m){
            iceCream.add(index1+1);
            iceCream.add(index2+1);
            iceCream.add(index3+1);
            return iceCream;
            //return index3;
        }else{
            if (index3+1 == arr.size()){
                index2 ++;
                index3 = index2+1;
                if (index2+2 == arr.size()){
                    index1 ++;
                    index2 = index1+1;
                    index3 = index2+1;
                    if (index1+3 == arr.size()){
                        m -= 1;
                        index1 = 0;
                        index2 = 1;
                        index3 = 2;
                    }
                }
                return icecreamRecursive(m,arr,index1,index2,index3);
            }else{
                return icecreamRecursive(m,arr,index1,index2,index3+1);  
            }
            
        } 
        
    }
    
    
    public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
        List<Integer> result;
        result = icecreamRecursive(m,arr,0,1,2); // recursive method
    
        return result;        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int m = Integer.parseInt(bufferedReader.readLine().trim());

                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                List<Integer> result = Result.icecreamParlor(m, arr);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
